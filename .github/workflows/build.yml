name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Install distutils and appdmg on macOS
        if: matrix.os == 'macos-latest'
        run: |
          python3 -m ensurepip
          python3 -m pip install setuptools
          python3 -m pip install distutils
          npm install appdmg

      - name: Build TypeScript files
        run: npm run build

      - name: Make distributables
        run: npm run make

      - name: Upload Artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts
          path: out/make

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Artifacts for macOS
        if: always()
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-artifacts
          path: artifacts/macos

      - name: Download Artifacts for Windows
        if: always()
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-artifacts
          path: artifacts/windows

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset for macOS
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos
          asset_name: macos-artifacts.zip
          asset_content_type: application/zip

      - name: Upload Release Asset for Windows
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows
          asset_name: windows-artifacts.zip
          asset_content_type: application/zip
